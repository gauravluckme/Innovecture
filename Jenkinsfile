pipeline {

    agent none

    options {
            // Disallow concurrent executions of the Pipeline. Can be useful
            // for preventing simultaneous accesses to shared resources, etc.
            //disableConcurrentBuilds()

            // Persist artifacts and console output for the specific number of
            // recent Pipeline runs.
            buildDiscarder(logRotator(numToKeepStr: '100'))

            // Prepend all console output generated by the Pipeline run with
            // the time at which the line was emitted.
            timestamps()
        }

     // Variables used in the pipeline need to be defined in this section
     //
     environment {
          // Declare the all the environment variables required for application
      }
  
    stages {
       stage('checkout') {
            agent  { node { label 'checkout' } }
            steps {
                checkout scm
            }
        }
       stage('Build') {
            agent  { node { label 'build' } }
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            agent  { node { label 'test' } }
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            agent  { node { label 'deploy' } }
            steps {
								sh '''
										## Maven command installs your Maven-built Java application
										mvn jar:jar install:install help:evaluate -Dexpression=project.name
										
										## Maven command extracts the value of the <name/> element
										NAME=`mvn help:evaluate -Dexpression=project.name | grep "^[^\[]"`
										
										## Maven command extracts the value of the <version/> element
										VERSION=`mvn help:evaluate -Dexpression=project.version | grep "^[^\[]"`
										
										## Command runs and outputs the execution of application to the Jenkins Console
										java -jar target/${NAME}-${VERSION}.jar
										'''
            }
        }
	}
    
	post {
		// Things that we want do regardless of pipeline's outcome
		//
		always {
        	node (Build){
					script{
						  echo "Pipe Duration (millisec): ${currentBuild.duration}"
              echo "Pipe Duration (human):    ${currentBuild.durationString}"
						
              // Sending mail for the build result
						  							
              def mailSub = "Jenkins Build Report"
              def mailBody = "Result for BUILD_NUMBER:   ${BUILD_NUMBER}   in  current JenkinsInstance"
							emailext attachLog: true, body: mailBody, subject: mailSub, to: ''						
					}
				}
			}
		}
}
